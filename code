const webhooks = [""]; // Tuto d'une personne choisie au hasard : https://youtu.be/P2Dt_UGa-Fs?t=532

// üéØ Ceci d√©finit les variables, qui peuvent √™tre renseign√©es ; elles sont compl√®tement facultatives.
// - Le titre peut √™tre ce que vous saisissez ci-dessous, mais si vous le laissez vide, le script le remplira avec le titre du formulaire.
// - L'image d'avatar est la petite vignette que vous voyez sur les int√©grations, c'est id√©al pour un logo.
// - La description courte est id√©ale si vous souhaitez ajouter un tout petit peu d'informations.
// - La couleur vous permet de saisir une couleur hexad√©cimale personnalis√©e, si elle est laiss√©e vide, une couleur sera choisie au hasard √† chaque fois.
// - La mention est id√©ale si vous souhaitez √™tre alert√© ou si vous souhaitez qu'un certain r√¥le soit alert√©. Mentionnez l'utilisateur/r√¥le dans Discord avec un \ au d√©but de la mise en forme.
// - Le type est une nouvelle variable obligatoire, indiquez soit "EMBED" soit "TEXT" - la valeur par d√©faut est "EMBED".

const title = "Un titre",
      avatarImage = "Le lien d'une image",
      shortDescription = "Une courte description",
      colour = "#000000",
      mention = "<@!>",
      type = "EMBED"; // Valeur par d√©faut

// üéõÔ∏è Fonctionnalit√©s suppl√©mentaires : vous pouvez les activer ou les d√©sactiver. 
// Les valeurs par d√©faut sont celles d√©finies ci-dessous.

const bonusFeatures = {
    convert2Link: 'ON', // Les liens int√©gr√©s seront cliquables | Les liens texte ne seront pas int√©gr√©s.
    convert2Mention: 'ON' // V√©rifie s'il existe un identifiant Discord et le convertit en mention.
}

// üìå Cela d√©finit et r√©cup√®re le formulaire actuel, toutes les r√©ponses du formulaire, 
// la derni√®re r√©ponse re√ßue et les √©l√©ments des questions-r√©ponses de la derni√®re r√©solution.

const form = FormApp.getActiveForm();
const allResponses = form.getResponses();
const latestResponse = allResponses[allResponses.length - 1];

if (!latestResponse) throw "‚ùå Aucune r√©ponse trouv√©e dans votre formulaire.";

const response = latestResponse.getItemResponses();
const items = response
    .filter(r => r.getResponse()) // Filtre les r√©ponses vides
    .map(r => ({ name: r.getItem().getTitle(), value: r.getResponse() }));

// ‚úÖ V√©rifie si un webhook est renseign√©
for (const hook of webhooks) {
    if (!/^https?:\/\/discord(?:app)?\.com\/api\/webhooks\/\d+\/[\w-]+$/i.test(hook)) {
        throw `‚ùå Webhook invalide : ${hook}`;
    }
}

// üñºÔ∏è V√©rifie si l‚ÄôURL de l‚Äôimage est bien une URL directe d‚Äôimage
if (avatarImage && !/\.(jpeg|jpg|gif|png|webp)$/i.test(avatarImage)) {
    throw "‚ùå L'URL de l'image doit √™tre un lien direct.";
}

// üîó Fonction pour formater les r√©ponses du formulaire en texte Discord
function formatData(item) {
    const linkRegex = /https?:\/\/[^\s]+/i;

    // Convertit un ID Discord en mention si activ√©
    if (bonusFeatures.convert2Mention === 'ON' && !isNaN(item.value) && item.value.length === 18) {
        item.value = `<@!${item.value}>`;
    }

    // Convertit les liens en format cliquable
    if (bonusFeatures.convert2Link === 'ON' && linkRegex.test(item.value)) {
        item.value = type.toLowerCase() !== "text" ? `[${item.value}](${item.value})` : `<${item.value}>`;
    }

    return `**${item.name}**\n${item.value}`;
}

// üõë V√©rification de la limite de caract√®res de Discord
const formattedData = items.map(formatData).join('\n\n');
if (formattedData.length + shortDescription.length > 1999) {
    throw "‚ùå Limite de Discord atteinte. Veuillez raccourcir les questions.";
}

// üìù Fonction pour envoyer un message en texte brut (non embed)
function plainText() {
    const payload = {
        method: "post",
        headers: { "Content-Type": "application/json" },
        muteHttpExceptions: true,
        payload: JSON.stringify({
            content: `${mention ? mention : ''}\n**${title || form.getTitle()}**\n\n${shortDescription ? `${shortDescription}\n\n${formattedData}` : formattedData}`
        })
    };

    // üöÄ Envoi du message √† tous les webhooks
    for (const hook of webhooks) {
        UrlFetchApp.fetch(hook, payload);
    }
}

// üñºÔ∏è Fonction pour envoyer un message en embed
function embedText() {
    const embed = {
        method: "post",
        headers: { "Content-Type": "application/json" },
        muteHttpExceptions: true,
        payload: JSON.stringify({
            content: mention || '',
            embeds: [{
                title: title || form.getTitle(), // Soit le titre d√©fini, soit le titre du formulaire
                description: shortDescription ? `${shortDescription}\n\n${formattedData}` : formattedData, // Description + r√©ponses
                thumbnail: avatarImage ? { url: encodeURI(avatarImage) } : null, // Image miniature
                color: parseInt(colour.substr(1), 16) || Math.floor(Math.random() * 16777215), // Couleur personnalis√©e ou al√©atoire
                timestamp: new Date().toISOString() // Date du jour
            }]
        })
    };

    // üöÄ Envoi du message embed √† tous les webhooks
    for (const hook of webhooks) {
        UrlFetchApp.fetch(hook, embed);
    }
}
